def createPackets(self):
        if self.file_Size > 0:
            with open(self.inputFile,'rb') as f:
                data = f.read(self.MSS)
                self.data_packets.append(data)
                while len(data) != 0:
                    data =f.read(self.MSS)
                    self.data_packets.append(data)
        self.total_packets_left = len(self.data_packets)



    def start_sending_data(self):
        self.sender_command='DAT'
        if self.total_packets_left <= math.floor(self.window_sender/self.MSS):
            for i in range(0, len(self.ready_packets)):
                self.retransmission_queue.append(self.ready_packets[0])
                self.current_file_queue.append(self.ready_packets.pop(0))
                self.total_packets_left = self.total_packets_left-1
        elif self.total_packets_left > math.floor(self.window_sender/self.MSS):
            packets_can_be_sent = math.floor(self.window_sender/self.MSS)
            for i in range(0,packets_can_be_sent):
                for i in self.ready_packets:
                    if i['packetNo'] == self.keep_track:
                        self.retransmission_queue.append(self.ready_packets[0])
                        self.current_file_queue.append(self.ready_packets.pop(0))
                        self.keep_track= self.keep_track+1
                        self.total_packets_left = self.total_packets_left-1


    def startPacketing(self):
        for i in self.data_packets:
            sender_payload = {}
            sender_payload['header'] = {}
            sender_payload['header']['comm']='DAT'
            sender_payload['header']['seq']=self.total_bytes_sent+1
            sender_payload['header']['len']=len(i.decode('utf-8'))
            sender_payload['body'] = i.decode('utf-8')
            sender_payload['packetNo'] = self.data_packets.index(i)+1
            self.total_bytes_sent+=len(i)

            #expected acks are created too at the same time
            self.expected_acks.append(self.total_bytes_sent+1)

            self.ready_packets.append(sender_payload)

        self.terminating_ack = self.expected_acks.pop(-1)

